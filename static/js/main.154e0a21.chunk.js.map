{"version":3,"sources":["components/Header/header.js","sounds/slide.mp3","components/Controls/controls.js","components/MuteToggle/mutetoggle.js","sounds/startTimer.mp3","sounds/pauseTimer.mp3","components/TimerDisplay/timerdisplay.js","components/Settings/settings.js","sounds/timesUp.mp3","components/Footer/footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","_ref","title","_jsx","children","Controls","timerMode","setTimerMode","setSecondsLeft","pomoLength","shortLength","longLength","setIsActive","setButtonText","volume","playSfx","useSound","clickSfx","handleModeChange","event","target","id","_jsxs","className","type","name","checked","onClick","onChange","htmlFor","muteToggle","setVolume","handleClick","xmlns","fill","stroke","viewBox","strokeLinecap","strokeLinejoin","strokeWidth","d","clipRule","TimerDisplay","percentage","timeLeft","isActive","buttonText","play","startSfx","interrupt","pause","pauseSfx","interupt","timeText","textSize","CircularProgressbarWithChildren","value","text","styles","buildStyles","pathTransitionDuration","pathColor","textColor","fontFamily","trailColor","MuteToggle","Settings","Footer","App","settingsVisible","setSettingsVisible","useState","setPomoLength","setShortLength","setLongLength","fontPref","setFontPref","accentColor","setAccentColor","secondsLeft","timesUp","timesUpSfx","useEffect","interval","setInterval","clearInterval","seconds","Math","floor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.154e0a21.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = ({ title }) => {\n  return(\n    <h1>{title}</h1>\n  )\n}\n\n\nexport default Header","export default __webpack_public_path__ + \"static/media/slide.3c8db537.mp3\";","import React from 'react'\nimport useSound from 'use-sound'\nimport clickSfx from '../../sounds/slide.mp3'\n\nconst Controls = ({ timerMode,\n                    setTimerMode,\n                    setSecondsLeft,\n                    pomoLength,\n                    shortLength,\n                    longLength,\n                    setIsActive,\n                    setButtonText,\n                    volume\n                  }) => {\n\n  const [playSfx] = useSound(clickSfx, { volume: volume });\n\n  const handleModeChange = (event) => {\n    setTimerMode(event.target.id)\n    setIsActive(false)\n    setButtonText('START')\n    switch(event.target.id) {\n      case 'short':\n        setSecondsLeft(shortLength * 60)\n        break\n      case 'long':\n        setSecondsLeft(longLength * 60)\n        break\n      default:\n        setSecondsLeft(pomoLength * 60)\n    }\n  }\n\n  return(\n    <form className=\"controls\">\n      <input  type=\"radio\" \n              id=\"pomo\" \n              name=\"mode\" \n              checked={timerMode === 'pomo'}\n              onClick={playSfx} \n              onChange={handleModeChange} />\n      <label  htmlFor=\"pomo\" className=\"controls__button\">pomodoro</label>\n\n      <input  type=\"radio\" \n              id=\"short\" \n              name=\"mode\" \n              checked={timerMode === 'short'}\n              onClick={playSfx} \n              onChange={handleModeChange} />\n      <label htmlFor=\"short\"  className=\"controls__button\">short break</label>\n      \n      <input  type=\"radio\" \n              id=\"long\" \n              name=\"mode\" \n              checked={timerMode === 'long'}\n              onClick={playSfx} \n              onChange={handleModeChange} />\n      <label htmlFor=\"long\"  className=\"controls__button\">long break</label>\n    </form>\n  )\n}\n\nexport default Controls","import React from 'react'\n\nconst muteToggle = ( { volume, setVolume }) => {\n  const handleClick = (event) => {\n    if (volume === 0) {\n      setVolume(1)\n    }\n    else {\n      setVolume(0)\n    }\n  }\n\n  if (volume === 0) {\n    return(\n            <button className=\"display__mute\"\n                    id=\"muteButton\"\n                    title=\"mute button\"\n                    onClick={handleClick}>\n                      <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\" clipRule=\"evenodd\"/><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2\"/></svg>\n            </button>\n          )\n  }\n\n  else {\n    return(\n      <button className=\"display__mute\"\n              id=\"muteButton\"\n              title=\"mute button\"\n              onClick={handleClick}>\n                <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z\"/></svg>\n      </button>\n    )\n  }\n}\n\nexport default muteToggle","export default __webpack_public_path__ + \"static/media/startTimer.2968a745.mp3\";","export default __webpack_public_path__ + \"static/media/pauseTimer.d73c4745.mp3\";","import React from 'react'\nimport MuteToggle from '../MuteToggle/mutetoggle'\nimport { CircularProgressbarWithChildren, buildStyles } from 'react-circular-progressbar'\nimport 'react-circular-progressbar/dist/styles.css'\nimport useSound from 'use-sound'\nimport startSfx from '../../sounds/startTimer.mp3'\nimport pauseSfx from '../../sounds/pauseTimer.mp3'\n\nconst TimerDisplay = ({ timerMode,\n                        percentage,\n                        timeLeft,\n                        isActive,\n                        setIsActive,\n                        buttonText,\n                        setButtonText,\n                        volume,\n                        setVolume\n                      }) => {\n\n  const [play] = useSound(startSfx, {\n                                      interrupt: true,\n                                      volume: volume,\n                                    })\n  const [pause] = useSound(pauseSfx, {\n                                      interupt: true,\n                                      volume: volume,\n                                    })\n\n  const handleClick = (event) => {\n    if (event.target.id === 'muteButton') {\n      return null\n    }\n    \n    if (timeLeft === '0:00') {\n      return null\n    }\n\n    if (isActive) {\n      pause()\n    }\n    else {\n      play()\n    }\n    setIsActive(!isActive)\n    setButtonText( buttonText === 'START'\n                    || buttonText === 'RESUME'\n                      ? 'PAUSE'\n                      : 'RESUME'\n                  )\n  }\n\n  let timesUpMsg = timerMode === 'pomo'\n                  ? 'time for a break'\n                  : 'back to work!'\n\n  let timeText = timeLeft === '0:00'\n                  ? timesUpMsg\n                  : timeLeft\n\n  let textSize = timeLeft === '0:00'\n                  ? '12px'\n                  : '28px'\n\n  return(\n    <div className=\"timer\" onClick={handleClick}>\n      <div className=\"timer__display\">\n        <CircularProgressbarWithChildren\n          value={percentage}\n          text={timeText}\n          strokeWidth={4}\n          styles={buildStyles({\n            // How long animation takes to go from one percentage to another, in seconds\n            pathTransitionDuration: 0.5,\n            // Colors & Fonts\n            pathColor: 'var(--accent-color)',\n            textColor: 'var(--text)',\n            textSize: textSize,\n            fontFamily: 'var(--font-current)',\n            trailColor: 'none',\n          })}>\n          \n          <MuteToggle volume = {volume}\n                      setVolume = {setVolume} />\n          <button className=\"display__start-pause\" onClick={handleClick}>{buttonText}</button>\n        </CircularProgressbarWithChildren>\n      </div>\n    </div>\n  )\n}\n\nexport default TimerDisplay","import React from 'react'\nimport Button from '../Button/button'\n\nconst Settings = ({ visible,\n                    toggleSettingsVisibility,\n                    pomoLength,\n                    setPomoLength,\n                    shortLength,\n                    setShortLength,\n                    longLength,\n                    setLongLength,\n                    fontPref,\n                    setFontPref,\n                    accentColor,\n                    setAccentColor,\n                    closeSettings,\n                    setSecondsLeft,\n                    timerMode,\n                  }) => {\n\n  const colors = {\n    default: '#F87070',\n    blue:   '#70F3F8',\n    purple: '#D881F8',\n  }\n\n  const fonts = {\n    kumbh: `'Kumbh Sans', sans-serif`,\n    roboto: `'Roboto Slab', serif`,\n    space: `'Space Mono', monospace`,\n  }\n\n  const styles = document.documentElement.style\n\n  const applySettings = (event) => {\n    event.preventDefault()\n\n    setPomoLength(event.target.pomodoro.value)\n    setShortLength(event.target.shortBreak.value)\n    setLongLength(event.target.longBreak.value)\n    setFontPref(event.target.font.value)\n    setAccentColor(event.target.color.value)\n    closeSettings()\n\n    styles.setProperty(\"--font-current\", fonts[event.target.font.value])\n    styles.setProperty(\"--accent-color\", colors[event.target.color.value])\n\n    switch(timerMode) {\n      case 'short':\n        setSecondsLeft(event.target.shortBreak.value * 60)\n        break\n      case 'long':\n        setSecondsLeft(event.target.longBreak.value * 60)\n        break\n      default:\n        setSecondsLeft(event.target.pomodoro.value * 60)\n    }\n  }\n\n  if (visible) {\n    return (\n      <div className=\"preferences preferences--visible\">\n      <div className=\"preferences__pane\">\n        <Button type=\"close\" buttonText=\"×\" toggleVisibility={toggleSettingsVisibility} />\n        <h2>Settings</h2>\n        <form onSubmit={applySettings}>\n          <div className=\"pane__time-settings\">\n            <h3>Time (Minutes)</h3>\n            <div action=\"\" className=\"time-settings__form\">\n              <label htmlFor=\"pomodoro\">pomodoro</label>\n              <input type=\"number\" name=\"pomodoro\" id=\"pomodoro\" min=\"5\" max=\"90\" defaultValue={pomoLength} />\n              <label htmlFor=\"short-break\">short break</label>\n              <input type=\"number\" name=\"shortBreak\" id=\"short-break\" min=\"1\" max=\"14\" defaultValue={shortLength} />\n              <label htmlFor=\"long-break\">long break</label>\n              <input type=\"number\" name=\"longBreak\" id=\"long-break\" min=\"15\" max=\"30\" defaultValue={longLength} />\n            </div>\n          </div>\n\n          <div className=\"pane__font-preference\">\n            <h3>Font</h3>\n            <input type=\"radio\" id=\"fontPref1\" name=\"font\" value=\"kumbh\" defaultChecked={fontPref === 'kumbh'} />\n            <label htmlFor=\"fontPref1\" className=\"font-preference__kumbh\">Aa</label>\n            <input type=\"radio\" id=\"fontPref2\" name=\"font\" value=\"roboto\" defaultChecked={fontPref === 'roboto'} />\n            <label htmlFor=\"fontPref2\" className=\"font-preference__roboto\">Aa</label>\n            <input type=\"radio\" id=\"fontPref3\" name=\"font\" value=\"space\" defaultChecked={fontPref === 'space'} />\n            <label htmlFor=\"fontPref3\" className=\"font-preference__space\">Aa</label>\n          </div>\n\n          <div className=\"pane__color-preference\">\n            <h3>Color</h3>\n            <input type=\"radio\" id=\"colorPref1\" name=\"color\" value=\"default\" defaultChecked={accentColor === 'default'} />\n            <label htmlFor=\"colorPref1\" className=\"color-preference__default\"></label>\n\n            <input type=\"radio\" id=\"colorPref2\" name=\"color\" value=\"blue\" defaultChecked={accentColor === 'blue'} />\n            <label htmlFor=\"colorPref2\" className=\"color-preference__blue\"></label>\n            \n            <input type=\"radio\" id=\"colorPref3\" name=\"color\" value=\"purple\" defaultChecked={accentColor === 'purple'} />\n            <label htmlFor=\"colorPref3\" className=\"color-preference__purple\"></label>\n          </div>\n          <Button type=\"apply\" buttonText=\"Apply\" />\n        </form>\n      </div>\n    </div>\n    )\n  }\n  \n  return(null)\n}\n\nexport default Settings","export default __webpack_public_path__ + \"static/media/timesUp.0cbb5adf.mp3\";","export default function Footer() {\n    return(<footer>Made with love in Bengaluru</footer>);\n}","import './App.css';\nimport Header from './components/Header/header'\nimport Controls from './components/Controls/controls'\nimport TimerDisplay from './components/TimerDisplay/timerdisplay'\nimport Button from './components/Button/button'\nimport Settings from './components/Settings/settings'\nimport { useState, useEffect } from 'react';\nimport useSound from 'use-sound'\nimport timesUpSfx from './sounds/timesUp.mp3'\nimport Footer from './components/Footer/footer';\n\nfunction App() {\n  const [ settingsVisible, setSettingsVisible ] = useState(false)\n  const [ timerMode, setTimerMode ] = useState('pomo')   // options: pomo, short, long\n  const [ pomoLength, setPomoLength ] = useState(25)\n  const [ shortLength, setShortLength ] = useState(3)\n  const [ longLength, setLongLength ] = useState(15)\n  const [ fontPref, setFontPref ] = useState('kumbh')         // options: kumbh, roboto, space\n  const [ accentColor, setAccentColor ] = useState('default') // options: default, blue, purple\n  const [ secondsLeft, setSecondsLeft] = useState(pomoLength * 60)\n  const [ isActive, setIsActive ] = useState(false)\n  const [ buttonText, setButtonText ] = useState('START')\n\n  const [ volume, setVolume ] = useState(1)\n  const [ timesUp ] = useSound(timesUpSfx, {\n                                volume: volume,\n                              })\n  useEffect(() => {\n    if(isActive) {\n      const interval = setInterval(() => {\n        setSecondsLeft(secondsLeft => secondsLeft - 1)\n      }, 1000)\n    \n      if(secondsLeft === 0) {\n        clearInterval(interval)\n        setIsActive(false)\n        setButtonText('')\n        timesUp()\n      }\n\n      return () => clearInterval(interval)\n    }\n    \n  }, [isActive, secondsLeft, timesUp]);\n\n\n  const toggleSettingsVisibility = (event) => {\n    setSettingsVisible(!settingsVisible)\n  }\n\n  const formatTimeLeft = (seconds) => {\n    return(`${Math.floor(seconds / 60)}:${\n            (seconds % 60 > 9)\n              ? seconds % 60\n              : '0' + seconds % 60\n          }`)\n  }\n\n  const calcPercentage = () => {\n    if(timerMode === 'pomo') {\n      return((secondsLeft / (pomoLength * 60)) * 100)\n    }\n    if(timerMode === 'short') {\n      return((secondsLeft / (shortLength * 60)) * 100)\n    }\n    if(timerMode === 'long') {\n      return((secondsLeft / (longLength * 60)) * 100)\n    }\n    \n  }\n\n  return (\n    <div className=\"pomodoro-app\">\n      <Header title=\"Utsavi's pomodoro\" />\n      <Controls\n        timerMode={timerMode}\n        setTimerMode={setTimerMode}\n        setSecondsLeft={setSecondsLeft}\n        pomoLength={pomoLength}\n        shortLength={shortLength}\n        longLength={longLength}\n        setIsActive={setIsActive}\n        buttonText={buttonText}\n        setButtonText={setButtonText}\n        volume={volume}\n        />\n      <TimerDisplay\n        timerMode={timerMode}\n        percentage={calcPercentage()}\n        timeLeft={formatTimeLeft(secondsLeft)}\n        isActive={isActive}\n        setIsActive={setIsActive}\n        buttonText={buttonText}\n        setButtonText={setButtonText}\n        volume={volume}\n        setVolume={setVolume}\n        />\n        <Footer/>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}